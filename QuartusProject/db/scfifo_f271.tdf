--scfifo ADD_RAM_OUTPUT_REGISTER="OFF" ALMOST_FULL_VALUE=80 DEVICE_FAMILY="Cyclone 10 LP" LPM_NUMWORDS=2048 LPM_SHOWAHEAD="ON" LPM_WIDTH=9 LPM_WIDTHU=11 OPTIMIZE_FOR_SPEED=5 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" almost_full clock data empty full q rdreq sclr usedw wrreq CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone V" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 20.1 cbx_altdpram 2020:11:11:17:06:45:SJ cbx_altera_counter 2020:11:11:17:06:45:SJ cbx_altera_syncram 2020:11:11:17:06:45:SJ cbx_altera_syncram_nd_impl 2020:11:11:17:06:45:SJ cbx_altsyncram 2020:11:11:17:06:45:SJ cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_fifo_common 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_counter 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_lpm_mux 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_scfifo 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_stratixiii 2020:11:11:17:06:46:SJ cbx_stratixv 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION a_dpfifo_tk31 (clock, data[8..0], rreq, sclr, wreq)
RETURNS ( empty, full, q[8..0], usedw[10..0]);

--synthesis_resources = lut 32 M9K 3 reg 52 
SUBDESIGN scfifo_f271
( 
	almost_full	:	output;
	clock	:	input;
	data[8..0]	:	input;
	empty	:	output;
	full	:	output;
	q[8..0]	:	output;
	rdreq	:	input;
	sclr	:	input;
	usedw[10..0]	:	output;
	wrreq	:	input;
) 
VARIABLE 
	dpfifo : a_dpfifo_tk31;
	dffe_af : dffe;
	comparison_af0	: WIRE;
	comparison_af1	: WIRE;
	comparison_af10	: WIRE;
	comparison_af2	: WIRE;
	comparison_af3	: WIRE;
	comparison_af4	: WIRE;
	comparison_af5	: WIRE;
	comparison_af6	: WIRE;
	comparison_af7	: WIRE;
	comparison_af8	: WIRE;
	comparison_af9	: WIRE;
	comparison_pre_af0	: WIRE;
	comparison_pre_af1	: WIRE;
	comparison_pre_af10	: WIRE;
	comparison_pre_af2	: WIRE;
	comparison_pre_af3	: WIRE;
	comparison_pre_af4	: WIRE;
	comparison_pre_af5	: WIRE;
	comparison_pre_af6	: WIRE;
	comparison_pre_af7	: WIRE;
	comparison_pre_af8	: WIRE;
	comparison_pre_af9	: WIRE;
	wire_af[10..0]	: WIRE;
	wire_pre_af[10..0]	: WIRE;

BEGIN 
	dpfifo.clock = clock;
	dpfifo.data[] = data[];
	dpfifo.rreq = rdreq;
	dpfifo.sclr = sclr;
	dpfifo.wreq = wrreq;
	dffe_af.clk = clock;
	dffe_af.d = ((dffe_af.q & (dffe_af.q $ (sclr # ((comparison_af10 & (! wrreq)) & rdreq)))) # ((! dffe_af.q) & ((((! sclr) & comparison_pre_af10) & wrreq) & (! rdreq))));
	almost_full = dffe_af.q;
	comparison_af0 = (dpfifo.usedw[0..0] $ wire_af[0..0]);
	comparison_af1 = ((dpfifo.usedw[1..1] $ wire_af[1..1]) & comparison_af0);
	comparison_af10 = ((dpfifo.usedw[10..10] $ wire_af[10..10]) & comparison_af9);
	comparison_af2 = ((dpfifo.usedw[2..2] $ wire_af[2..2]) & comparison_af1);
	comparison_af3 = ((dpfifo.usedw[3..3] $ wire_af[3..3]) & comparison_af2);
	comparison_af4 = ((dpfifo.usedw[4..4] $ wire_af[4..4]) & comparison_af3);
	comparison_af5 = ((dpfifo.usedw[5..5] $ wire_af[5..5]) & comparison_af4);
	comparison_af6 = ((dpfifo.usedw[6..6] $ wire_af[6..6]) & comparison_af5);
	comparison_af7 = ((dpfifo.usedw[7..7] $ wire_af[7..7]) & comparison_af6);
	comparison_af8 = ((dpfifo.usedw[8..8] $ wire_af[8..8]) & comparison_af7);
	comparison_af9 = ((dpfifo.usedw[9..9] $ wire_af[9..9]) & comparison_af8);
	comparison_pre_af0 = (dpfifo.usedw[0..0] $ wire_pre_af[0..0]);
	comparison_pre_af1 = ((dpfifo.usedw[1..1] $ wire_pre_af[1..1]) & comparison_pre_af0);
	comparison_pre_af10 = ((dpfifo.usedw[10..10] $ wire_pre_af[10..10]) & comparison_pre_af9);
	comparison_pre_af2 = ((dpfifo.usedw[2..2] $ wire_pre_af[2..2]) & comparison_pre_af1);
	comparison_pre_af3 = ((dpfifo.usedw[3..3] $ wire_pre_af[3..3]) & comparison_pre_af2);
	comparison_pre_af4 = ((dpfifo.usedw[4..4] $ wire_pre_af[4..4]) & comparison_pre_af3);
	comparison_pre_af5 = ((dpfifo.usedw[5..5] $ wire_pre_af[5..5]) & comparison_pre_af4);
	comparison_pre_af6 = ((dpfifo.usedw[6..6] $ wire_pre_af[6..6]) & comparison_pre_af5);
	comparison_pre_af7 = ((dpfifo.usedw[7..7] $ wire_pre_af[7..7]) & comparison_pre_af6);
	comparison_pre_af8 = ((dpfifo.usedw[8..8] $ wire_pre_af[8..8]) & comparison_pre_af7);
	comparison_pre_af9 = ((dpfifo.usedw[9..9] $ wire_pre_af[9..9]) & comparison_pre_af8);
	empty = dpfifo.empty;
	full = dpfifo.full;
	q[] = dpfifo.q[];
	usedw[] = dpfifo.usedw[];
	wire_af[] = ( B"1", B"1", B"1", B"1", B"0", B"1", B"0", B"1", B"1", B"1", B"1");
	wire_pre_af[] = ( B"1", B"1", B"1", B"1", B"0", B"1", B"1", B"0", B"0", B"0", B"0");
END;
--VALID FILE
